*&---------------------------------------------------------------------*
*& Report ZTST_OO
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ztst_oo.

CLASS lcl_locutor DEFINITION.
  PUBLIC SECTION.

    DATA:
      nome       TYPE string,
      idade      TYPE i,
      ultima_msg TYPE string.

    METHODS:
      constructor IMPORTING iv_nome  TYPE string
                            iv_idade TYPE i OPTIONAL,
      falar IMPORTING iv_mensagem   TYPE string OPTIONAL
                      it_mensagens  TYPE string_table OPTIONAL
                      iv_ultima_msg TYPE boolean OPTIONAL
                        PREFERRED PARAMETER iv_mensagem,
      dizer_ultima_mensagem.
ENDCLASS.

START-OF-SELECTION.
  DATA: lo_locutor1 TYPE REF TO lcl_locutor.
  CREATE OBJECT lo_locutor1
    EXPORTING
      iv_nome  = 'Max'
      iv_idade = 23.
  lo_locutor1->falar('Ol·, sejam bem-vindos' ).
  lo_locutor1->falar('Quero cafÈ!' ).
  lo_locutor1->dizer_ultima_mensagem( ).
  lo_locutor1->falar('Quero ir pra casa' ).
  lo_locutor1->falar('Quero dormir' ).
CLASS lcl_locutor IMPLEMENTATION.
  METHOD constructor.
    me->nome = iv_nome.
    me->idade = iv_idade.
  ENDMETHOD.
  METHOD falar.
    IF iv_ultima_msg IS NOT SUPPLIED.
      WRITE:/ 'O locutor', nome COLOR COL_TOTAL, 'diz:' , iv_mensagem COLOR COL_POSITIVE.
    ELSE.
      WRITE:/ 'O locutor', nome COLOR COL_TOTAL, 'diz novamente:' , iv_mensagem COLOR COL_POSITIVE.
      ultima_msg = iv_mensagem.
    ENDIF.
    ultima_msg = iv_mensagem.
  ENDMETHOD.
  METHOD dizer_ultima_mensagem.
    DATA: ultima_mensagem TYPE string.
    me->falar( iv_mensagem = me->ultima_msg
    iv_ultima_msg = abap_true ).
    WRITE:/ 'Ultima mensagem dita:', me->ultima_msg COLOR COL_GROUP.
  ENDMETHOD.
ENDCLASS.